// SPDX-License-Identifier: GPL-2.0-only OR MIT
/dts-v1/;

#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/input.h>
#include <dt-bindings/leds/common.h>

#include "mt7981.dtsi"

/ {
	model = "EDUP RT2980 Non-OpenWrt";
	compatible = "edup,rt2980n", "mediatek,mt7981";

	aliases {
		serial0 = &uart0;
		label-mac-device = &gmac0;

		led-boot = &led_status_red;
		led-failsafe = &led_status_red;
		led-running = &led_status_green;
		led-upgrade = &led_status_green;
	};

	chosen {
		stdout-path = "serial0:115200n8";
		bootargs = "console=ttyS0,115200n1 loglevel=8 earlycon=uart8250,mmio32,0x11002000,root=/dev/fit0";
	};

	memory {
		reg = <0 0x40000000 0 0x10000000>;
	};

	leds {
		compatible = "gpio-leds";

		led_status_green: green {
			label = "led_green";
			gpios = <&pio 4 GPIO_ACTIVE_LOW>;
			function = LED_FUNCTION_STATUS;
			color = <LED_COLOR_ID_GREEN>;
			trigger-sources = "timer";
			default-state = "on";
		};

		led_status_red: red {
			label = "led_red";
			gpios = <&pio 5 GPIO_ACTIVE_LOW>;
			function = LED_FUNCTION_STATUS;
			color = <LED_COLOR_ID_RED>;
		};
	};

	gpio-keys {
		compatible = "gpio-keys";

		reset {
			label = "reset";
			linux,code = <KEY_RESTART>;
			gpios = <&pio 1 GPIO_ACTIVE_LOW>;
			debounce-interval = <60>;
		};

		mesh {
			label = "mesh";
			gpios = <&pio 0 GPIO_ACTIVE_LOW>;
			linux,code = <BTN_9>; /* This might need to be mapped to an appropriate OpenWrt key code if BTN_9 is not standard */
			linux,input-type = <EV_SW>;
			debounce-interval = <60>;
		};
	};

	/*
	 * The Immortalwrt DTS uses a "generic,nmbm" node to wrap the SPI NAND
	 * partitions. OpenWrt typically defines partitions directly under the
	 * spi-nand node using "fixed-partitions". We will adopt the OpenWrt
	 * approach and define the partitions directly under spi_nand.
	 *
	 * The partition layout from Immortalwrt is preserved, but adjusted
	 * to fit the OpenWrt "fixed-partitions" structure.
	 */
};

&uart0 {
	status = "okay";
};

&watchdog {
	status = "okay";
};

&eth {
	status = "okay";

	gmac0: mac@0 {
		compatible = "mediatek,eth-mac";
		reg = <0>;
		phy-mode = "2500base-x";
		fixed-link {
			speed = <2500>;
			full-duplex;
			pause;
		};
	};

	gmac1: mac@1 {
		compatible = "mediatek,eth-mac";
		reg = <1>;
		phy-mode = "gmii";
		/* In OpenWrt, the PHY connection is typically defined in the switch node */
		phy-handle = <&int_gbe_phy>;
	};

	mdio: mdio-bus {
		compatible = "mediatek,ethsys-mdio";
		#address-cells = <1>;
		#size-cells = <1>;

		/*
		 * The phy0 definition in Immortalwrt seems to be a direct PHY
		 * node. In OpenWrt with DSA, PHYs are often managed by the switch
		 * driver or defined under the MDIO bus if directly accessible
		 * and needed for specific properties like calibration data.
		 * We will define the switch under the mdio-bus as seen in the
		 * OpenWrt template and link the PHY to the switch port if necessary.
		 */
	};
};

/*
 * The Immortalwrt DTS defines a "gsw" node compatible with "mediatek,mt753x".
 * The OpenWrt template uses "mediatek,mt7531" compatible with a "switch" node
 * under the "mdio_bus". We will adopt the OpenWrt style and define the switch
 * node under the mdio-bus with the appropriate compatible string and properties.
 */
&mdio_bus {
	switch: switch@1f {
		compatible = "mediatek,mt7531"; /* Assuming MT7531 based on common usage with MT7981b */
		reg = <0x1f>;
		/* Reset GPIO polarity might differ, check board schematics if possible. Assuming ACTIVE_HIGH based on template */
		reset-gpios = <&pio 39 GPIO_ACTIVE_HIGH>;
		interrupt-controller;
		#interrupt-cells = <1>;
		interrupt-parent = <&pio>;
		interrupts = <38 IRQ_TYPE_LEVEL_HIGH>;
		status = "okay";

		ports {
			#address-cells = <1>;
			#size-cells = <0>;

			port@0 {
				reg = <0>;
				label = "lan1";
			};

			port@1 {
				reg = <1>;
				label = "lan2";
			};

			port@2 {
				reg = <2>;
				label = "lan3";
			};

			wan: port@3 {
				reg = <3>;
				label = "wan";
				/* MAC address from factory if available */
				nvmem-cell-names = "mac-address";
				nvmem-cells = <&macaddr_factory_4 (-2)>;
			};

			port@6 {
				reg = <6>;
				ethernet = <&gmac0>;
				phy-mode = "2500base-x";

				fixed-link {
					speed = <2500>;
					full-duplex;
					pause;
				};
			};
		};
	};
};

&spi0 {
	pinctrl-names = "default";
	pinctrl-0 = <&spi0_flash_pins>;
	status = "okay";

	spi_nand: spi_nand@0 {
		#address-cells = <1>;
		#size-cells = <1>;
		compatible = "spi-nand";
		reg = <0>;

		spi-max-frequency = <52000000>;
		spi-tx-bus-width = <4>;
		spi-rx-bus-width = <4>;

		spi-cal-enable;
		spi-cal-mode = "read-data";
		spi-cal-datalen = <7>;
		spi-cal-data = /bits/ 8 <0x53 0x50 0x49 0x4e 0x41 0x4e 0x44>;
		spi-cal-addrlen = <5>;
		spi-cal-addr = /bits/ 32 <0x0 0x0 0x0 0x0 0x0>;

		/* ESMT F50L1G41LB (128M) */
		partitions: partitions {
			compatible = "fixed-partitions";
			#address-cells = <1>;
			#size-cells = <1>;

			partition@0 {
				label = "BL2";
				reg = <0x00 0x100000>;
				read-only;
			};

			partition@100000 {
				label = "u-boot-env";
				reg = <0x100000 0x80000>;
			};

			partition@180000 {
				label = "Factory";
				reg = <0x180000 0x200000>;
				read-only;

				nvmem-layout {
					compatible = "fixed-layout";
					#address-cells = <1>;
					#size-cells = <1>;

					macaddr_factory_4: macaddr@4 {
						compatible = "mac-base";
						reg = <0x4 0x6>;
						#nvmem-cell-cells = <1>;
					};
				};
			};

			partition@380000 {
				label = "FIP";
				reg = <0x380000 0x200000>;
				read-only;
			};

			partition@580000 {
				label = "ubi";
				reg = <0x0580000 0x4000000>;
				compatible = "linux,ubi";

				volumes {
					ubi_rootdisk: ubi-volume-fit {
						volname = "fit";
					};
				};
			};

			/*
			 * Porting additional partitions.
			 * These seem specific and might need further investigation for their purpose
			 * and whether they are necessary or handled differently in OpenWrt.
			 * Adding them as-is for now, but they might need adjustments or removal.
			 */
			partition@4580000 {
				label = "pdt_data";
				reg = <0x4580000 0x0600000>;
				read-only;
			};

			partition@4b80000 {
				label = "pdt_data_1";
				reg = <0x4b80000 0x0600000>;
				read-only;
			};

			partition@5180000 {
				label = "exp";
				reg = <0x5180000 0x100000>;
			};

			partition@5280000 {
				label = "plugin";
				reg = <0x5280000 0x2580000>;
			};
		};
	};
};

&pio {
	spi0_flash_pins: spi0-pins {
		mux {
			function = "spi";
			groups = "spi0", "spi0_wp_hold";
		};

		conf-pu {
			pins = "SPI0_CS", "SPI0_HOLD", "SPI0_WP";
			drive-strength = <MTK_DRIVE_8mA>;
			bias-pull-up = <MTK_PUPD_SET_R1R0_11>;
		};

		conf-pd {
			pins = "SPI0_CLK", "SPI0_MOSI", "SPI0_MISO";
			drive-strength = <MTK_DRIVE_8mA>;
			bias-pull-down = <MTK_PUPD_SET_R1R0_11>;
		};
	};
};
/*
&wifi {
	status = "okay";
	mediatek,mtd-eeprom = <&factory 0x0>;
};
*/
/*
 * The Immortalwrt DTS includes an &hnat node. This is related to hardware
 * NAT acceleration. While OpenWrt supports this, the configuration might
 * be handled differently or enabled via kernel modules and settings rather
 * than directly in the DTS in all cases. We will omit this node for now
 * as it's not present in the basic OpenWrt template and might require
 * specific OpenWrt subsystem knowledge to port correctly.
 */
